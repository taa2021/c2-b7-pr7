---

- name: Set pgp repo key
  ansible.builtin.copy:
    src:  ubuntu-pgp
    dest: /tmp/ubuntu-pgp-psql
    owner: root
    group: root
    mode: '0600'
  when: ansible_facts['distribution'] == "Ubuntu"

- name: Set pgp repo key
  ansible.builtin.copy:
    src:  centos-pgp
    dest: /tmp/centos-pgp-psql
    owner: root
    group: root
    mode: '0600'
  when: ansible_facts['distribution'] == "CentOS"

- name: Import pgp repo key
  ansible.builtin.rpm_key:
    state: present
    key: /tmp/centos-pgp-psql
  when: ansible_facts['distribution'] == "CentOS"

- name: Import pgp repo key
  ansible.builtin.apt_key:
    file: /tmp/ubuntu-pgp-psql
    state: present
  when: ansible_facts['distribution'] == "Ubuntu"

- name: Add repository
  yum_repository:
    name: "postgresql-{{ postgresql_version }}"
    description: PostgreSQL - $basearch
    gpgcheck: yes
    state: present
    enabled: yes
    baseurl: https://download.postgresql.org/pub/repos/yum/{{ postgresql_version }}/redhat/rhel-$releasever-$basearch
  when: ansible_facts['distribution'] == "CentOS"

- name: Clean repository cache (CentOS)
  command: yum clean expire-cache
  args:
    warn: no
  when: ansible_facts['distribution'] == "CentOS"

- name: Disable selinux (CentOS)
  command: setenforce 0
  args:
    warn: no
  ignore_errors: yes
  when: ansible_facts['distribution'] == "CentOS"

- name: Disable selinux permanently (CentOS)
  ansible.builtin.lineinfile:
    path: /etc/selinux/config
    state: present
    regexp: "^SELINUX=disabled"
    line: "SELINUX=disabled"
  when: ansible_facts['distribution'] == "CentOS"

- name: Work out the distribution
  command: lsb_release -sc
  register: lsb_release_sc
  when: ansible_facts['distribution'] == "Ubuntu"

- name: Add repository
  ansible.builtin.apt_repository:
    repo: "deb http://apt.postgresql.org/pub/repos/apt {{ lsb_release_sc.stdout }}-pgdg {{ postgresql_version }} main"
    state: present
    filename: "postgresql-{{ postgresql_version }}"
  when: ansible_facts['distribution'] == "Ubuntu"

- name: Install package
  ansible.builtin.package:
    name: "postgresql{{ postgresql_version }}-server"
    state: present
  when: ansible_facts['distribution'] == "CentOS"

- name: Install package
  ansible.builtin.package:
    name: "postgresql-{{ postgresql_version }}"
    state: present
  when: ansible_facts['distribution'] == "Ubuntu"

- name: Change ownership of a directory
  ansible.builtin.file:
    path: "{{ postgresql_pgdata }}"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Change ownership of a directory
  ansible.builtin.file:
    path: "{{ postgresql_pgdata }}/data"
    state: directory
    owner: postgres
    group: postgres
    mode: '0750'

- name: Initialize the Database
  register: init_result
  environment:
    PGDATA: '{{ postgresql_pgdata }}/data'
  command: "sudo -E -u postgres /usr/pgsql-{{ postgresql_version }}/bin/initdb -U postgres --locale=ru_RU.UTF-8"
  args:
    creates: "{{ postgresql_pgdata }}/data/PG_VERSION"
    warn: no
  when: ansible_facts['distribution'] == "CentOS"

- name: Initialize the Database
  register: init_result
  environment:
    PGDATA: '{{ postgresql_pgdata }}/data'
  command: "sudo -E -u postgres /usr/lib/postgresql/{{ postgresql_version }}/bin/initdb -U postgres --locale=ru_RU.UTF-8"
  args:
    creates: "{{ postgresql_pgdata }}/data/PG_VERSION"
    warn: no
  when: ansible_facts['distribution'] == "Ubuntu"

- name: Allow docker-containers connection
  ansible.builtin.lineinfile:
    path: "{{ postgresql_pgdata }}/data/pg_hba.conf"
    state: present
    line: "host    all             all             172.17.0.1/16            md5"

- name: Create service
  register: create_service_result
  ansible.builtin.template:
    src:  "postgresql-{{ ansible_distribution }}.j2"
    dest: "/lib/systemd/system/postgresql-{{ postgresql_version }}@{{ postgresql_pgdata | replace('/', '-')  }}.service"
    owner: root
    group: root
    mode: '0644'
  when: init_result is not failed

- name: Disable system stardart ubuntu service
  ansible.builtin.service:
    name: "postgresql"
    enabled: no
    state: stopped
    daemon_reload: yes
  when: create_service_result is not failed and ( ansible_facts['distribution'] == "Ubuntu"  )

- name: Enable and start service
  ansible.builtin.service:
    name: "postgresql-{{ postgresql_version }}@{{ postgresql_pgdata | replace('/', '-')  }}.service"
    enabled: yes
    state: started
    daemon_reload: yes
  when: create_service_result is not failed

- name: Debug
  debug:
    msg: "postgresql-{{ postgresql_version }}@{{ postgresql_pgdata | replace('/', '-')  }}.service"
